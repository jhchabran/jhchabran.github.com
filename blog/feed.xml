<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>JHChabran</title>
		<description>Thoughts on Ruby, CoffeeScript and Vim from a passionate developer.</description>
    <link>http://jhchabran.com/blog</link>
		<atom:link href="http://jhchabran.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Introducing Photograph</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://github.com/jhchabran/photograph/&quot;&gt;Photograph&lt;/a&gt; is a really simple
gem that provides to take screenshots of webpages as they are rendered
in webkit. Give Photograph the url you want and that's all.&lt;/p&gt;

&lt;p&gt;The interesting part is how easy this was to code !&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Throwing gems at it&lt;/h2&gt;

&lt;p&gt;It's about using Capybara with Polteirgeist (which wraps PhantomJS) to take the screenshot itself, then use MiniMagick
to crop if needed. Adding some Ruby around it makes the Ruby API :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;artist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Artist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://jhchabran.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shoot!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;send_file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;png&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Quite easy isn't it ? Cropping can be done through the optionals
parameters &lt;code&gt;:x :y :w :h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Deciding when to take the screenshot is probably the only tricky part.
You can either specify a timer through &lt;code&gt;:wait&lt;/code&gt;  or wait for some dive
to appear with &lt;code&gt;:selector =&amp;gt; &quot;.page&quot;&lt;/code&gt; for example.&lt;/p&gt;

&lt;h2&gt;As a webservice&lt;/h2&gt;

&lt;p&gt;As photograph after all the layers ends by running webkit, it can be
used to produce screenshots reflecting exactly the rendering got an a
platform. The use case we had that led to coding photograph some months ago
was requiring OSX rendering. As we had an iPad client rendering rich
content fetched from the backend, we had to rely on screenshots when
listing the different pages to avoid fully rendering them which would
have been very costly, especially since listing don't need any
interaction at all.&lt;/p&gt;

&lt;p&gt;Well, as we were obviously not hosting our webservice on an OSX machine
but on Heroku, a thin Sinatra layer was added to make calls from Heroku
to Photograph, which was hosted on a Mac.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
  GET
http://photograph.somewhere.com/shoot?url=http://jhchabran.com&amp;amp;selector=.page
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And it answers with a png within 1 to 3 seconds. Wrap that into a
Delayed or Resque Job and problem solved.&lt;/p&gt;

&lt;p&gt;Need more photographs ? Spawn more Sinatra instances !&lt;/p&gt;

&lt;h2&gt;Good and bad parts&lt;/h2&gt;

&lt;p&gt;What is really interesting there is the fact the code is so simple that
there's almost no room for bugs besides those that may be carried by the
libraries photograph's relies on. Obviously, Sinatra and Capybara are
robusts, the only small issue we had was on Capybara-Webkit which had
its &lt;code&gt;webkit-server&lt;/code&gt; dying after being online for some hours. Switching
to PhantomJS thanks to Polteirgeist solved the problem.&lt;/p&gt;

&lt;p&gt;But such simple code comes with its limitations. Having GET requests
that takes more than 2 seconds can be irritating. Plus scaling can be
achieved in a much better way than having one webkit instance running
per Sinatra.&lt;/p&gt;

&lt;p&gt;As our use case require tons of screenshots, we finally switched to
Url2Png which worked great so far. As we were already working with SAAS
everywhere it really made sense to add some cash there and let people
focused on that problem solving it for us.&lt;/p&gt;

&lt;p&gt;Nevertheless if taking a few screenshots is all you need, firing some
photograph instance is probably the simplest way to achieve it.&lt;/p&gt;

&lt;h2&gt;Upcoming&lt;/h2&gt;

&lt;p&gt;So far, I'm really surprised to see how simple all of this was to write.
Photograph had been successfully used in production on two apps.
Experience shows that adding some features to scale it would improve the
whole usability and decrease the amount of code required to use it.&lt;/p&gt;

&lt;p&gt;I'm currently thinking of adding Resque to photograph, having one
phantomjs instance per worker thus making scaling easy as &lt;code&gt;COUNT=5
QUEUE=* rake resque:workers&lt;/code&gt;. The screenshot would be provided
afterward with a POST uploading it to the web app that needs it, with
the url specified in a &lt;code&gt;callback&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;There also might be some work to be done to detect &lt;code&gt;window.onload&lt;/code&gt;
instead of the crappy &lt;code&gt;wait&lt;/code&gt; timer, to speed up the whole process.&lt;/p&gt;

&lt;h2&gt;Getting it&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jhchabran/photograph/&quot;&gt;Source are available here&lt;/a&gt;
and as a gem &lt;code&gt;gem install photograph&lt;/code&gt; then &lt;code&gt;photograph -h 192.168.0.1
-p 8080&lt;/code&gt; for example.&lt;/p&gt;
</description>
				<pubDate>Thu, 10 Jan 2013 00:00:00 -0800</pubDate>
				<link>http://jhchabran.com/blog/2013/01/10/introducing-photograph</link>
				<guid isPermaLink="true">http://jhchabran.com/blog/2013/01/10/introducing-photograph</guid>
			</item>
		
			<item>
				<title>Guest post about CoffeeScript on DevQuotes</title>
				<description>&lt;p&gt;CoffeeScript is now four years old and had been introduced into
Rails 3 default stack in april 2011. Yet CoffeeScript isn't well known
among the gigantic community of web developers!&lt;/p&gt;

&lt;p&gt;So as friends of mine are running &lt;a href=&quot;http://devquotes.com&quot;&gt;a generalist blog about development and
security&lt;/a&gt;, I took the opportunity of introducing
CoffeeScript there to their heterogeneous audience.&lt;/p&gt;

&lt;p&gt;I wrote a &lt;a href=&quot;http://www.devquotes.com/2012/12/15/coffeescript-javascript-like-a-sir/&quot;&gt;guest post there, introducing CoffeeScript&lt;/a&gt; with a quick overview, stressing as it should be
the fact that CoffeeScript is a drop in replacement for Javascript, not
a costful technology change.&lt;/p&gt;

&lt;p&gt;CoffeeScript is a rare bird, web developers from any language and
framework can benefit from it, I wonder how its usage will grow in 2013.&lt;/p&gt;
</description>
				<pubDate>Fri, 21 Dec 2012 00:00:00 -0800</pubDate>
				<link>http://jhchabran.com/blog/2012/12/21/guest-post-about-coffee-script</link>
				<guid isPermaLink="true">http://jhchabran.com/blog/2012/12/21/guest-post-about-coffee-script</guid>
			</item>
		
			<item>
				<title>Mixed links of the week (2)</title>
				<description>&lt;p&gt;It's been eleven days since my last &lt;a href=&quot;http://jhchabran.com/blog/2012/12/03/mixed-links-of-the-week-1&quot;&gt;mixed links of the week&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far I managed to build up enough motivation to write at least one article
per week, thanks to &lt;a href=&quot;http://www.amazon.com/gp/product/1934356883/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1934356883&amp;amp;linkCode=as2&amp;amp;tag=jhchabran-20&quot; title=&quot;&quot;&gt;this great book&lt;/a&gt;, I still have trouble posting these mixed links on a fixed day :).&lt;/p&gt;

&lt;p&gt;Anyway, this week includes Ruby, Haskell, R, an interview,
communications and a surprising initiative!&lt;/p&gt;

&lt;p&gt;French readers, don't miss &lt;a href=&quot;http://contest.dimelo.com/&quot;&gt;Dimelo Ruby Christmas Contest&lt;/a&gt;, win a Nexus 7 by submitting pull requests to &lt;a href=&quot;http://contest.dimelo.com/#packaging&quot;&gt;open source projects&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;During these eleven days I stumbled upon many interesting articles,
starting with &lt;a href=&quot;http://patshaughnessy.net/&quot;&gt;Pat Shaughnessy&lt;/a&gt; which
crafted &lt;a href=&quot;http://www.rubyinside.com/ruby-mri-code-walk-tour-6020.html&quot;&gt;a neat codewalk into Ruby MRI source
code&lt;/a&gt;. If
you never dived into Ruby source code before and had thoughts like &quot;Where the fuck
do I start&quot; (as everyone did at some point), this video is a must-see.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zachholman.com/&quot;&gt;Zach Holman&lt;/a&gt;, a notorious Githubber, posted a really well written article explaining how &lt;a href=&quot;http://zachholman.com/posts/chat/&quot;&gt;chat trumps meetings&lt;/a&gt;. Text based discussions are really a better way to communicate according to Zach. And I'm convinced he's right, I'll just add that it's true as long as you work with people with that actually are used to write. Sadly it's a skill that is often underlooked among developers and almost never introduced in programming courses.&lt;/p&gt;

&lt;p&gt;Broaden your mind with Haskell with &lt;a href=&quot;http://bendyworks.com/geekville/articles/2012/12/from-ruby-to-haskell-part-1-testing&quot;&gt;a Ruby to Haskell&lt;/a&gt;
 post which is the first of of the series, beginning with testing. It introduces at some point &lt;a href=&quot;http://hackage.haskell.org/package/QuickCheck&quot;&gt;QuickCheck&lt;/a&gt; which is basically a fuzzy testing library that mess with functions to ensure constraints are correctly met. Trust me, have a look at this thing, it's very weird for a Rubyist!&lt;/p&gt;

&lt;p&gt;CodeSchool published a &lt;a href=&quot;http://tryr.codeschool.com/&quot;&gt;course abour R programming language&lt;/a&gt;, a language designed to deal with
statistics and data modeling. Maybe you remember Zed Shaw using R, in his &quot;Play by Play&quot; Peepcode episode. He showed how he used it to make statistics about his efficiency at different times of the day. Seriously, I wish I had such wonderful content to learn programming when I was a kid.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.confreaks.com/presenters/24-jim-weirich&quot;&gt;Jim Weirich&lt;/a&gt;, mostly known for his many public talks and being the author of Rake, &lt;a href=&quot;http://rubysource.com/an-interview-with-jim-weirich/&quot;&gt;was interviewd by RubySource&lt;/a&gt;. He addresses many topics such as how he got hooked into Ruby, functional programming, threading, testing.&lt;/p&gt;

&lt;p&gt;Caching partials with Rails and memcache is still too slow? Have a look
at how the guy behind Obama's campaign website used &lt;code&gt;read_multi&lt;/code&gt; to avoid
fetching sequentially from Memcache. It's smart, simple and comes with a
gem ! &lt;a href=&quot;http://ninjasandrobots.com/rails-faster-partial-rendering-and-caching/&quot;&gt;Faster partial rendering and caching, the Obama way&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thought the Haskell link was exotic ? Here comes the Darling project, aiming
to &lt;a href=&quot;http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=MTI0Njc&quot;&gt;run OSX binaries on Linux&lt;/a&gt;.
Still at its very beginning, but hey, Wine got Windows binaries running
on Linux, why couldn't OSX binaries be ran too? Sincerely, I got a huge admiration for people starting such tremendous projects.&lt;/p&gt;
</description>
				<pubDate>Fri, 14 Dec 2012 00:00:00 -0800</pubDate>
				<link>http://jhchabran.com/blog/2012/12/14/mixed-links-of-the-week-2</link>
				<guid isPermaLink="true">http://jhchabran.com/blog/2012/12/14/mixed-links-of-the-week-2</guid>
			</item>
		
			<item>
				<title>Fun with to_proc and compositions</title>
				<description>&lt;p&gt;What about being able to shorten &lt;code&gt;users.collect { |user| user.order.city }&lt;/code&gt; or its
unefficient form &lt;code&gt;users.collect(&amp;amp;:order).collect(&amp;amp;:city)&lt;/code&gt; into&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;It can be achieved by composing functions, in Ruby's case by composing Procs.
This is an amusing exercise that demonstrates Ruby's functional abilites.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;Just in case you need to freshen your memory about composing functions, it's a common notion in functional programming and it's also found early in mathematics courses.&lt;/p&gt;

&lt;p&gt;Given two functions &lt;code&gt;f(x)&lt;/code&gt; and &lt;code&gt;g(x)&lt;/code&gt;, &lt;code&gt;(g o f)(x) ==
g(f(x))&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt; being the symbol of the composition operation.&lt;/p&gt;

&lt;h2&gt;Unchaining method calls&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;users.collect { |user| user.order.city }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first step here is to compact the &lt;code&gt;#order&lt;/code&gt; and &lt;code&gt;#city&lt;/code&gt; method calls.&lt;/p&gt;

&lt;p&gt;To achieve that, it's interesting to know how methods calls are done
under the hood. Python, by being explicit by design as opposed to Ruby, gives a clear
answer :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstname&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastname&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastname&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Each method accepts a first argument which is always &lt;code&gt;self&lt;/code&gt;.
It's simple as that, a method is nothing more than a function
 whose first argument is the instance. This way, attributes can be
accessed trough self inside the function. Under the hood in Ruby &lt;code&gt;@firstname&lt;/code&gt; is basically just a nice way to grab it from the instance without having to be explicit about &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Back to our example, with that knowledge we can say that :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;is equivalent in the underlying implementation to :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# pseudo-code&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;So that's it, in theory we got functions here and composing them makes
sense :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# pseudo-code, &amp;#39;o&amp;#39; being the hypothetical composition operator.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get_order_then_city&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_order_then_city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Finally, let's convert that to real Ruby code, artificially reverting methods to
their primitive forms, functions.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Those two Procs still need to be composed, sadly Ruby don't come with a
defined composition operator for Proc, so let's write one.&lt;/p&gt;

&lt;h2&gt;Composing functions in Ruby&lt;/h2&gt;

&lt;p&gt;As Procs are Ruby objects, it's simply a matter of adding a composition
operator to the Proc class. As the symbol used in mathematics, &lt;code&gt;o&lt;/code&gt; can't be used here,
it's usually &lt;code&gt;*&lt;/code&gt; that takes its place.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;increment_and_square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt; 
  
  &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increment_and_square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; (2+1)^2 = 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Implementation is pretty straight-forward :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Proc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now &lt;code&gt;increment&lt;/code&gt; and &lt;code&gt;square&lt;/code&gt; can be composed throught the
&lt;code&gt;*&lt;/code&gt;
operator and it works as expected.&lt;/p&gt;

&lt;h2&gt;Back to business&lt;/h2&gt;

&lt;p&gt;At this point, the job is almost finished. Procs can be composed,
and symbols can be converted to Procs thanks to &lt;code&gt;&amp;amp;:order&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;:order&lt;/code&gt; is quite common but before composing it, how does it really works ?&lt;/p&gt;

&lt;p&gt;Behind its somewhat exotic syntax, it calls &lt;code&gt;#to_proc&lt;/code&gt; which creates a Proc that sends the
symbol itself, (&lt;code&gt;:order&lt;/code&gt; in this case) to an object. Then it
converts the Proc into a block so it can be passed to methods like
&lt;code&gt;#each&lt;/code&gt; or &lt;code&gt;#collect&lt;/code&gt; that expects one.&lt;/p&gt;

&lt;p&gt;In more concrete terms &lt;code&gt;&amp;amp;:order&lt;/code&gt; creates the following Proc:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;get_order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And its generalized form:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Symbol&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This is a simplified version, the real one can handle multiple&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# arguments.&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__send__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Such Procs can as previously seen, be easily composed with the brand new &lt;code&gt;*&lt;/code&gt;
operator on Procs.&lt;/p&gt;

&lt;p&gt;At this point it can be tempting to write  &lt;code&gt;users.collect(&amp;amp;:city * &amp;amp;:order)&lt;/code&gt; but
this can't work. As a block isn't an object, calling any method on it (&lt;code&gt;#*&lt;/code&gt; in this case) makes absolutely no sense.
Only a single unary &lt;code&gt;&amp;amp;&lt;/code&gt; can exist in an expression. Ruby will raise a &lt;code&gt;SyntaxError&lt;/code&gt; if
a second one is present.&lt;/p&gt;

&lt;p&gt;The correct syntax with a single &lt;code&gt;&amp;amp;&lt;/code&gt; isn't really shiny, but it
works as expected.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&amp;#39;Kuala Lumpur&amp;#39;, &amp;#39;Paris&amp;#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;But frankly, from a syntactic point of view, it's sill far from being simpler
than a traditional &lt;code&gt;users.collect { |user| user.order.city }&lt;/code&gt; and
the order feels a bit backward.&lt;/p&gt;

&lt;h2&gt;Adding Syntactic Sugar&lt;/h2&gt;

&lt;p&gt;Even if it's just for fun, better syntax can be achived by calling
Array to the rescue. Having a list of Procs that will be composed makes some sense and provides a lighter syntax.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&amp;#39;Kuala Lumpur&amp;#39;, &amp;#39;Paris&amp;#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;code&gt;#to_proc&lt;/code&gt; can be added to basically any object, while this opens
many weird and exotic possibilites it suits perfectly what is needed
here.&lt;/p&gt;

&lt;p&gt;So building a Proc from an array of symbols, given they can be converted
to procs and then composed, can be written as the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&amp;#39;kuala lumpur&amp;#39;, &amp;#39;paris&amp;#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Yet without knowing we're composing stuff under the hood, it would be
nice to have the symbols ordered like the chained method calls.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&amp;#39;kuala lumpur&amp;#39;, &amp;#39;paris&amp;#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And it does the job and with a nice syntax!&lt;/p&gt;

&lt;p&gt;The only bad thing here is it has to create a Proc for each symbol and that's why nobody should use it in real code. A less fun but more practical version can be written by using
&lt;code&gt;#inject&lt;/code&gt; and &lt;code&gt;#send&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



</description>
				<pubDate>Sun, 09 Dec 2012 00:00:00 -0800</pubDate>
				<link>http://jhchabran.com/blog/2012/12/09/fun-with-to-proc-and-compositions</link>
				<guid isPermaLink="true">http://jhchabran.com/blog/2012/12/09/fun-with-to-proc-and-compositions</guid>
			</item>
		
			<item>
				<title>Mixed links of the week (1)</title>
				<description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.arkency.comb2012/11/not-rails/&quot;&gt;Not Rails&lt;/a&gt;: Rails isn't
the right answer for every project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mutuallyhuman.com/blog/2012/11/26/speeding-things-up-with-jruby/&quot;&gt;Speeding up things with JRuby&lt;/a&gt;: basic example showing how JRuby obliterates MRI when it comes to threading.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://podtynnyi.com/2012/11/29/build-mruby-for-android/&quot;&gt;Building Mruby on Android&lt;/a&gt; : who thought that building mruby on Android would be so easy ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://elcuervo.github.com/minuteman/&quot;&gt;Fast Analytics with Redis&lt;/a&gt; :
old tricks never dies, Redis and its bitwise operations to store analytics.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.reddit.com/r/vim/comments/141vhx/efficient_command_mode&quot;&gt;Vim: efficient command mode&lt;/a&gt;: an interesting thread on reddit, found many Vim tips I never heard about.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://craigkerstiens.com/2012/11/30/sharding-your-database/&quot;&gt;Sharding your database&lt;/a&gt;: a well explained introduction to database sharding.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Mon, 03 Dec 2012 00:00:00 -0800</pubDate>
				<link>http://jhchabran.com/blog/2012/12/03/mixed-links-of-the-week-1</link>
				<guid isPermaLink="true">http://jhchabran.com/blog/2012/12/03/mixed-links-of-the-week-1</guid>
			</item>
		
			<item>
				<title>Testing a Chrome Extension with Mocha and CoffeeScript</title>
				<description>&lt;p&gt;So we've previously seen how to bootstrap &lt;a href=&quot;http://jhchabran.com/blog/2011/12/17/build-a-chrome-extension-with-coffeescript/&quot;&gt;a chrome extension with CoffeeScript&lt;/a&gt;.
The next step is about adding testing support. Even if it's a simple
extension, the whole process of reloading the extension in the browser
to manually test a feature is incredibly boring and error prone.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;To illustrate,
&lt;a href=&quot;https://chrome.google.com/webstore/detail/tabswitcher/gkdkligmcadfbagoeggeohelmgalchcn&quot;&gt;TabSwitcher&lt;/a&gt; will be used as an example, more
specifically the &lt;code&gt;match(url, abbreviation)&lt;/code&gt; function which returns a &lt;code&gt;float&lt;/code&gt;, indicating how close is
&lt;code&gt;abbreviation&lt;/code&gt; is to &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This post assume you're already comfortable with testing.&lt;/p&gt;

&lt;h2&gt;Setuping the tests&lt;/h2&gt;

&lt;p&gt;Before anything, a test framework needs to be chosen. Mocha is probably
the most popular choice nowadays. It doesn't come with an expectation
library and defaults to NodeJS's standard library :
&lt;a href=&quot;http://nodejs.org/api/assert.html&quot;&gt;assert&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you may know javascript Arrays being objects, testing equality between objects of the same type
 means testing identity. In short &lt;code&gt;[1,2] == [1,2]&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt;.
It does make sense given how the equality operator is defined yet being
unusual to someone used to Ruby or Python.&lt;/p&gt;

&lt;p&gt;Most of the time, it's equality between elements that is needed when
writing assertions.&lt;/p&gt;

&lt;p&gt;A bad practice to achieve it would be to use  &lt;code&gt;toString()&lt;/code&gt;, converting them and
 running the comparison against the returned strings. It's poor man's
equality because it would skip elements types, ie comparing &lt;code&gt;[1,2]&lt;/code&gt;
and &lt;code&gt;['1','2']&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; instead of the expected &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Node's assert library is obviously relying on the equality operator, it
would yield false positives which are really painful to deal with.&lt;/p&gt;

&lt;p&gt;To avoid wasting time plumbing with arrays comparisons, let's just use
an assertion library, Mocha advertises about should.js which provides
our expected array comparison:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;should success&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;To install these two libraries:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;npm install mocha should -g
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Storing tests under &lt;code&gt;/tests&lt;/code&gt; directory is a no brainer. You can place
that directory wherever you want, &lt;code&gt;/spec&lt;/code&gt; being a common choice
too.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tabswitcher &lt;span class=&quot;c&quot;&gt;# extension&amp;#39;s root dir&lt;/span&gt;
mkdir tests
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And create a file that will contain our tests.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;touch spec/fuzzy_test.coffee
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;should&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fuzzy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;should fail&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Run it with&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;mocha --compilers coffee:coffee-script tests 

  .

  X 1 of 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;failed:

  1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Fuzzy should fail:
      
      actual expected
      
      42 0
      
      at Object.Assertion.eql
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/home/tech/code/jhchabran/tabswitcher/node_modules/should/lib/should.js:285:10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      at Context.&amp;lt;anonymous&amp;gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/home/tech/code/jhchabran/tabswitcher/tests/fuzzy_test.coffee:8:24&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      at Test.Runnable.run
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/local/lib/node_modules/mocha/lib/runnable.js:213:32&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      at Runner.runTest
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/local/lib/node_modules/mocha/lib/runner.js:341:10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      at Runner.runTests.next
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/local/lib/node_modules/mocha/lib/runner.js:387:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      at next &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/local/lib/node_modules/mocha/lib/runner.js:267:14&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      at Runner.hooks
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/local/lib/node_modules/mocha/lib/runner.js:276:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      at next &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/local/lib/node_modules/mocha/lib/runner.js:224:23&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      at Runner.hook
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/local/lib/node_modules/mocha/lib/runner.js:244:5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      at process.startup.processNextTick.process._tickCallback
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;node.js:244:9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;A &lt;a href=&quot;https://github.com/jhchabran/tabswitcher/blob/master/Cakefile#L46&quot;&gt;test
task&lt;/a&gt; in the Cakefile comes handy to fire the tests.&lt;/p&gt;

&lt;h2&gt;Loading the code we want to test&lt;/h2&gt;

&lt;p&gt;Now tests are up and failing, it's time to write expectations about
functions that will be used in the extension. There is a last bump on
our road to deal with. Code is ran in two different environments :
browser and NodeJs.&lt;/p&gt;

&lt;p&gt;On one hand, the chrome extension code runs in a browser, scripts are loaded by the html
pages, through &lt;code&gt;script&lt;/code&gt; tags. On the other hand tests
run the code in a Node.js environment and loading is done through
&lt;code&gt;require&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Given &lt;code&gt;src/fuzzy.coffee&lt;/code&gt; is going to define a &lt;code&gt;match&lt;/code&gt; function
we need to use in our tests, it first must be exported to be succesfully required
afterward.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# /src/fuzzy.coffee&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;match = &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;(url, abbreviation)-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;exports.match = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# /tests/fuzzy_spec.coffee&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;f = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;../src/fuzzy&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fuzzy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;should call match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;score = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ggl&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We run it again with &lt;code&gt;cake test&lt;/code&gt; and it should fail or success
depending the implementation of &lt;code&gt;match&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But if the extension is launched within the browser it will whine about
&lt;code&gt;exports&lt;/code&gt; not being defined. No surprise, in a browser
context,&lt;code&gt;exports&lt;/code&gt; doesn't mean anything unless manually defined.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Idiomatic predicate&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;isCommonJS = &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isCommonJS&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;exports.match = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;match = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And now we got our code both running in specs and in the extension.&lt;/p&gt;

&lt;h2&gt;What about Chrome API ?&lt;/h2&gt;

&lt;p&gt;Extension code that makes use of chrome.* apis that can't be used in tests as is because they belong to Chrome and we're running tests unde NodeJs.&lt;/p&gt;

&lt;p&gt;Usually simply separating concerns solves the problem. In the
present case, &lt;code&gt;match&lt;/code&gt; just returns a float, indicating how close the
abbreviation is to the url. No api calls are made through computation,
leaving no need to mock them in some sort.&lt;/p&gt;

&lt;p&gt;Sometimes, for simplicity sake, it's shorter to still pass around chrome
api structures, like &lt;code&gt;chrome.tab&lt;/code&gt;. Well, it's just an object, build
one that mimics the fields you need and that's all.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# /tests/fuzzy_spec.coffee&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;tab = &lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;url   : &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://google.com&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;title : &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Google&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;It's coding time!&lt;/h2&gt;

&lt;p&gt;We got our extension running CoffeeScript code and tests can be written as
needed. Isn't it more comfortable to write a Chrome Extension now ?&lt;/p&gt;

&lt;p&gt;As we just added unit testing so far, an interesting question would be how to write some integration tests ? Like testing the whole workflow, considering we must deal with code running in different contexts: background page, popup and inserted in the current page.&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href=&quot;http://github.com/jhchabran/TabSwitcher&quot;&gt;example used through this post on Github&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Wed, 28 Nov 2012 00:00:00 -0800</pubDate>
				<link>http://jhchabran.com/blog/2012/11/28/testing-a-chrome-extension-with-mocha-and-coffeescript</link>
				<guid isPermaLink="true">http://jhchabran.com/blog/2012/11/28/testing-a-chrome-extension-with-mocha-and-coffeescript</guid>
			</item>
		
			<item>
				<title>TabSwitcher got updated</title>
				<description>&lt;p&gt;TabSwitcher had been started one year ago, to showcase &lt;a href=&quot;http://jhchabran.com/blog/2011/12/17/build-a-chrome-extension-with-coffeescript&quot;&gt;(see previous
post)&lt;/a&gt;
how a Chrome Extension using CoffeeScript can be built. I recently spend some
time polishing it to bring it to the level of a decently featured
extension.&lt;/p&gt;

&lt;p&gt;Before describing the changes, what problem does it aims to solve ?&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Switching between tabs like ninja&lt;/h2&gt;

&lt;p&gt;I mostly work with more than thirty tabs opened in my browser. Between
 Gmail, Basecamp, Github, various documentations,
news and dumb cat pictures, it ends being pretty scary.&lt;/p&gt;

&lt;p&gt;With so many tabs, you can't even read the tabs titles, it's at best a row of
favicons. So when I was toying around Chrome
extensions with CoffeeScript, I attempted to solved that by porting a popular method used to
switch between opened files in code editors: fuzzy finding (match &quot;&lt;em&gt;google&lt;/em&gt;&quot;
with &quot;&lt;em&gt;ggle&lt;/em&gt;&quot;)&lt;/p&gt;

&lt;p&gt;CtrlP.vim, Command-T in Textmate are well known examples of fuzzy
finding.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/tabswitcher/gkdkligmcadfbagoeggeohelmgalchcn&quot;&gt;Meet TabSwitcher&lt;/a&gt;, basically the same thing for Chrome, using urls (over
page titles, they tend to vary too much over time).&lt;/p&gt;

&lt;h2&gt;New algorithm&lt;/h2&gt;

&lt;p&gt;The previous algorithm was written during a flight between New York and
Paris where I couldn't sleep. It was crappy and inefficient. It wasn't even capable of looking
for every substrings in urls, meaning when you submitted &quot;&lt;strong&gt;ruby&lt;/strong&gt;&quot;, it would
match against &quot;http://&lt;strong&gt;r&lt;/strong&gt;o&lt;strong&gt;ub&lt;/strong&gt;a&lt;strong&gt;y&lt;/strong&gt;.com/&quot; over
&quot;http://reddit.com/r/&lt;strong&gt;ruby&lt;/strong&gt;&quot; because the occurrences appeared earlier
in the first url, which is absolutely not the correct result.&lt;/p&gt;

&lt;p&gt;This yielded some very weird results and forbid any real usage of the
extension.&lt;/p&gt;

&lt;p&gt;After reading interesting things in the fuzzy finding
field, I wrote a decent yet simple algorithm that can handle real usage.&lt;/p&gt;

&lt;p&gt;First, I added tests, which you may want &lt;a href=&quot;https://github.com/jhchabran/tabswitcher/blob/master/spec/fuzzy_spec.coffee&quot;&gt;to have a look
at&lt;/a&gt;, they
basically explains how the ranking algorithm scores urls depending on how input characters are distributed in each url.&lt;/p&gt;

&lt;h2&gt;Configurable&lt;/h2&gt;

&lt;p&gt;Another key point was that the old extension wasn't even configurable at all. This
now can be done through the extension button. Yet I have to do something
with the possible hotkeys because if you set by mistake a Chrome shortcut, let's say Ctrl-T, Chrome will ignore the extension and fire its default behavior instead.&lt;/p&gt;

&lt;p&gt;This become irritating when you know that chrome have dozens of shortcuts
that can interfere.&lt;/p&gt;

&lt;p&gt;I have to thing about how I'll handle that. I hope the bindings are
accessible from the APIs, because manually maintaining a list of every possible
shortcuts for OSX, Window and Linux is going to be painful and easily
broken.&lt;/p&gt;

&lt;h2&gt;Reworked design&lt;/h2&gt;

&lt;p&gt;Still far from being perfect, but it's more Chrome'ish now.
Urls are now truncated and won't mess the layout.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/4BLX3uvEudzeJjhcCga9mSJEYwmfVnZKFhP055JyitaCNj4XldpFTKLnoh3G1pPKOCMC0BVqug=s640-h400-e365&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Dramatic Chrome Store&lt;/h2&gt;

&lt;p&gt;So far I don't really have a clue on how people behave on the chrome store, I got like 4000 views on the past two days and got eight installs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/dramatic_chrome_store.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Obviously, there's still a lot of time to be spent on how to market the extension itself, helping people to understand what it does and narrowing down the description to hit the right potential users before they hit the back button.&lt;/p&gt;

&lt;p&gt;This is going to be fun and entertaining to play with, I'd probably write
about it!&lt;/p&gt;
</description>
				<pubDate>Sun, 25 Nov 2012 00:00:00 -0800</pubDate>
				<link>http://jhchabran.com/blog/2012/11/25/Tabswitcher-got-updated</link>
				<guid isPermaLink="true">http://jhchabran.com/blog/2012/11/25/Tabswitcher-got-updated</guid>
			</item>
		
			<item>
				<title>Vim isn't about speed</title>
				<description>&lt;p&gt;Vim users, myself included, often advocate about gaining speed, carving
text like a
ninja and banning that awful device named a mouse.&lt;/p&gt;

&lt;p&gt;The follow-up to this is people saying, &quot;Vim seems to be awesome but I
don't need to
be that fast anyway.&quot;&lt;/p&gt;

&lt;p&gt;Each time I heard that, I tried to advocate about the fact that as a
coder
you're staying around seven hours per day typing, so why not try
something really efficient ?&lt;/p&gt;

&lt;p&gt;It hardly convinced anyone.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;Sublime Text 2, Textmate, are common answers, gladly followed by a &quot;It
does the job&quot;.&lt;/p&gt;

&lt;p&gt;This made realize how wrong I was to introduce vim that way. Sure,
Vim-fu is always amazing to watch, but nobody really cares about speed.&lt;/p&gt;

&lt;p&gt;You don't get to code that fast with vim. You spend time thinking then
you enter your idea. Or you think while typing, going back and forth
through potentials solutions. Getting faster don't mean producing
significantly more code, the bottleneck is your brain anyway.&lt;/p&gt;

&lt;h2&gt;It's about comfort.&lt;/h2&gt;

&lt;p&gt;Ever played to a FPS or a RTS ? Think about how you interact with the
game.
You basically remember that each key is associated to a function. Want
to reload ? Press R. Want to build a bunker in Starcraft 2 ? Select your
worker
, press B then U. After a while, it becomes completely natural and you
start memorizing patterns, or simply words made of your keypresses.&lt;/p&gt;

&lt;p&gt;Now imagine having to press control R to reload, hold control while
pressing B and U. It would be annoying right ? Having to strech fingers
to
catch that modifier all the time...&lt;/p&gt;

&lt;p&gt;Well that's basically the most common way to send commands to your text
editor besides clicking in a menu.&lt;/p&gt;

&lt;h2&gt;Modality saves the day&lt;/h2&gt;

&lt;p&gt;Vim solves that by providing two modes : insert mode and normal mode.
You already know insert mode, it's the behavior you always knew to enter
text. Press hello, it writes &quot;hello&quot;.&lt;/p&gt;

&lt;p&gt;Press ESC or Ctrl-C to get back to normal mode, which is the standard
mode and the reason behind the i you have to type before entering text.&lt;/p&gt;

&lt;p&gt;Normal mode is similar to Starcraft 2. How can we change the text
insides the quotes in the following example ?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;9 : def greet
10:   &quot;Hello you!&quot;
11: end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10G to go to line 10, ci&quot; to delete text inside the pair of quotes and
it puts you in insert mode. That's the kind of moves you make all day
long in vim. And exaclty like in Starcraft 2, it makes words : c stands
for change, i for inner and finally &quot; to point out quotes as a
delimiter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;9 : def greet
10:   &quot;&quot;      # The cursor will end between the quotes.
11: end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sounds complicated ? Yes at first. But like Starcraft, you'll get used
to these kinds of moves.&lt;/p&gt;

&lt;p&gt;Obviously, there are some vim actions bound to control something, like
redo
which is ctrl-r or ctrl-d to scroll down.
But that still makes significantly less modifiers usage than any other
editor.&lt;/p&gt;

&lt;h2&gt;How could I live without it ?&lt;/h2&gt;

&lt;p&gt;After a while, it becomes natural, you don't even think about it.
Your brain just know that going to next
tab is gt, change text inside a pair of parenthesis is ci) and so on. It
feels natural, exactly like typing.&lt;/p&gt;

&lt;p&gt;You type to enter text, you type to shape your code, you type to move
around (forget the arrows keys, do yourself a favor, disable them and
use hjkl instead and learn other moving keys!).&lt;/p&gt;

&lt;p&gt;And most of the time, your hands are on or close of the home row, which
is
the key to have comfortable text entering position (This is especially
important if you have small hands like I do !).&lt;/p&gt;

&lt;p&gt;Welcome to Vim, an efficient tool to edit text. It's different from
other
editors, it is tough to learn, but you'll end with what I consider after
trying every editor out there the most comfortable tool to handle text
and code.&lt;/p&gt;

&lt;p&gt;This comfort is a plague, you'll want it everywhere : mails,
browser, shell. And this is why people stick to Vim once they got
hooked, comfort.&lt;/p&gt;

&lt;h2&gt;Common pitfalls&lt;/h2&gt;

&lt;p&gt;If you're not from UK or USA, you have a localized keyboard. Throw it
away, it will just stand between you in and vim. For example Azerty is
pretty horrible, : and w are on the bottom row on the keyboard's edge.
Just use a qwerty mapping for coding and you will notice that in fact,
everything was made for qwerty. Weird key positions will now make sense.
Typing 45G to go to line 45 is way easier too since you now got numbers
without shift. Same goes for d3w, delete three words. You got the idea.&lt;/p&gt;

&lt;p&gt;Don't try to rebind everything. Choices had been made by people that
spent years in Vi, it's not like you're going to find something better
for every function in your two days vim life span.&lt;/p&gt;

&lt;p&gt;If you try switching, stick to it. Try it for a week, not five minutes
until you switch back because you that it wrecks your productivity.
You can't cheat on this step.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I just love vim for the ease it gives me with text editing, but to get
started you have to keep in mind that getting out of your comfort zone
is required to gain more of it.&lt;/p&gt;

&lt;p&gt;In the end, I find that being fast while editing code in Vim is simply a
consequence of this comfort.&lt;/p&gt;

&lt;p&gt;Dig into &lt;a href=&quot;http://www.learnivore.com/search/vim&quot;&gt;Learnivore&lt;/a&gt; to find many
resources to get started !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Edit :&lt;/strong&gt; correct a few typos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit2:&lt;/strong&gt; Thanks to
&lt;a href=&quot;http://www.reddit.com/user/Qoc_au_vin&quot;&gt;Qoc_au_vin&lt;/a&gt; for pointing me
that w to advance to the next word isn't required before ci&quot; !&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Thu, 27 Sep 2012 00:00:00 -0700</pubDate>
				<link>http://jhchabran.com/blog/2012/09/27/vim-isnt-about-speed</link>
				<guid isPermaLink="true">http://jhchabran.com/blog/2012/09/27/vim-isnt-about-speed</guid>
			</item>
		
			<item>
				<title>10 Rails Quality Examples</title>
				<description>&lt;p&gt;Learning Rails by example is a great way to progress. This &lt;a href=&quot;http://jetpackweb.com/blog/2009/10/14/high-quality-ruby-on-rails-example-applications/&quot;&gt;blog post&lt;/a&gt;
list ten awesome &lt;strong&gt;real world&lt;/strong&gt; projects on which you should
definitively read if you want to improve.&lt;/p&gt;
</description>
				<pubDate>Tue, 12 Jun 2012 00:00:00 -0700</pubDate>
				<link>http://jhchabran.com/blog/2012/06/12/10-high-quality-rails-examples</link>
				<guid isPermaLink="true">http://jhchabran.com/blog/2012/06/12/10-high-quality-rails-examples</guid>
			</item>
		
			<item>
				<title>Rails Girls Paris on 15-16th June</title>
				<description>&lt;p&gt;I will be there as a coach !&lt;/p&gt;
</description>
				<pubDate>Sun, 27 May 2012 00:00:00 -0700</pubDate>
				<link>http://jhchabran.com/blog/2012/05/27/rails-girls-paris</link>
				<guid isPermaLink="true">http://jhchabran.com/blog/2012/05/27/rails-girls-paris</guid>
			</item>
		
	</channel>
</rss>
